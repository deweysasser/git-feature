#!/bin/env python2.7

# Purpose:  
# git feature start foo -> git checkout -b wip/foo
# git feature ready -> git branch ready/<featurename> or (git stash save "pub-checkpoint"; git 


import argparse
import subprocess
import re
import inspect
import sys

######################################################################
# Metaprogramming

Commands=[]
def command(func):
    Commands.append(func)
    return func


######################################################################
# Utilities
def error(message):
    print message
    sys.exit(1)



######################################################################
# Process utilities

class Pipe(object):
    def __init__(self, command):
        self.command = command

    def __enter__(self):
        self.process = subprocess.Popen(self.command.split(), stdout=subprocess.PIPE)
        return self.process.stdout

    def __exit__(self, type, value, tb):
        if self.process.wait() > 0:
            raise Exception("Error running command {}".format(self.command))

def run(command):
    print command
    if subprocess.call(command.split()) > 0:
        raise Exception("Error running git branch")


######################################################################
# basic GIT commands

def linesFrom(cmd):
    lines = []
    with Pipe(cmd) as p:
        return map(lambda x: x.strip(), p.readlines())

def cutlines(col,cmd):
    return map(lambda x: x[col:], linesFrom(cmd))

def oneline(cmd):
    with Pipe(cmd) as p:
        return p.readline().rstrip()


class Git(object):
    def __init__(self):
        self.Config=None
        pass

    def __getattr__(self, cmd):
        def command(*args):
            run("git {} {}".format(cmd, " ".join(args)))
        return command

    def currentBranch(self):
        return re.sub("^refs/heads/", "", oneline("git symbolic-ref HEAD"))

    def commitFor(self, branch):
        return oneline("git rev-parse {}".format(branch))

    def mergeBase(self, b1, b2):
        return oneline("git merge-base {} {}".format(b1, b2))
    
    def branches(self):
        return map(lambda x: x[2:], linesFrom("git branch"))

    def changes(self, b1, b2):
        base = self.mergeBase(b1, b2)
        if base == self.commitFor(b1):
            return []
        return linesFrom("git log --oneline {}..{}".format(base, b1))

    def remotes(self):
        return linesFrom("git remote")

    def hasChanges(self, *args):
        if subprocess.call(("git diff --quiet " + " ".join(args)).split()) == 0:
            return False
        else:
            return True

    def modified(self):
        files=[]
        with Pipe("git ls-files --exclude-standard -m") as p:
            return map(lambda x: x.rsplit(), p.readlines())


    def config(self, key, default=None):
        if self.Config is None:
            self.Config =dict()
            p= subprocess.Popen("git config -l".split(), stdout=subprocess.PIPE)
            for line in p.stdout.readlines():
                parts=line.rstrip().split("=", 1)
                self.Config[parts[0]]=parts[1]
                p.wait()
	
        if key in self.Config:
            return self.Config[key]
        else:
            return default

git=Git()


######################################################################
# git informational functions




######################################################################
# Advanced git operations

class stashed(object):
    '''A context which stashes all unsaved changes, restoring them after the context completes'''
    def __init__(self):
        pass

    def __enter__(self):
        if len(git.modified())>0:
            self.stashed=True
            run("git stash save temp stash")
        else:
            self.stashed=False

    def __exit__(self, type, value, tb):
        if self.stashed:
            run("git stash pop")


class Checkout(object):
    '''A context which checks out a branch, restoring the existing branch when the context completes.'''
    def __init__(self, branch):
        self.saved = None
        self.branch = branch

    def __enter__(self):
        self.saved = git.currentBranch()
        git.checkout(self.branch)

    def __exit__(self, type, value, tb):
        if type is not None:
            git.merge("--abort")
        git.checkout(self.saved)

######################################################################
# git feature commands


@command
def start(name, base=None, bugfix=False):
    '''Start a feature called NAME'''
    if base:
        branch = base
    else:
        branch=git.config("feature.target", "master")

    if bugfix:
        type = "bugfix"
    else:
        type = "feature"

    target = "wip/{}/{}".format(type, name)

    if git.currentBranch() == target:
        print "Already on {}".format(target)
        return

    if target in git.branches():
        git.checkout(target)
        with stashed():
            git.rebase(branch)
    else:
        git.checkout("-b", target, branch)

@command
def rebase():
    '''Rebase the current WIP changes so that they do not interfere with publishing ready changes'''
    current = git.currentBranch()
    with stashed():
        target = re.sub("^wip/", "ready/", current)
        base = git.mergeBase(current, target)
        git.rebase("-i", base)

@command
def log():
    '''Show changes from master'''
    current = git.currentBranch()
    ready= re.sub("^wip/", "ready/", current)
    wip = re.sub("ready/", "^wip/", current)
    rchanges = git.changes(ready, git.config("feature.target", "master"))
    wchanges = git.changes(wip, ready)

    if len(rchanges) > 0:
        print "Ready:"
        print "  * " + "\n  * ".join(rchanges)

    if len(wchanges) > 0:
        print "In progress:"
        print "  * " + "\n  * ".join(wchanges)

    if len(wchanges) == 0 and len (rchanges) == 0:
        print "no pending changes"


@command
def ready():
    '''Merge changes from the current WIP feature branch to a READY feature branch'''
    branch = git.currentBranch()
    bs = git.branches()

    target = re.sub("^wip/", "ready/", branch)

    if target in bs:
        with stashed():
            with Checkout(target):
                git.merge(branch)
    else:
        git.branch(target, branch)

@command
def merge(name):
    '''Merge the ready commits of the current feature to the integration branch'''
    master = git.config("feature.target", "master")
    if re.match("wip/", name):
        name = re.sup("^wip/", "ready/", name)
    elif not re.match("ready/^", name):
        name = "ready/" + name

    with stashed():
        with Checkout(master):
            git.merge("--no-ff", name)
            

@command
def publish():
    '''Push the READY feature branch to the 'origin' remote (or the feature.origin config setting)'''
    branch = git.currentBranch()

    remote = git.config("feature.origin", "origin")
    target = re.sub("^wip/", "ready/", branch)

    if remote in git.remotes():
        git.push(remote, target)
    else:
        error("feature.origin not set to valid remote and remote 'origin' not found")

@command
def push():
    '''Push the WIP feature branch to the 'mine' remote (or the feature.fork config setting)'''
    branch = git.currentBranch()

    remote = git.config("feature.fork", "mine")
    target = re.sub("^ready/", "wip/", branch)

    if remote in git.remotes():
        git.push("-f", remote, target)
    else:
        error("feature.fork not set to valid remote and remote 'mine' not found")

@command
def list():
    '''Show all feature branches, WIP or READY'''
    bs = filter(lambda x: "wip/" in x or "ready/" in x, git.branches())
    print "\n".join(bs)

@command
def done():
    '''Check out the 'master' branch (or feature.target branch)'''
    branch=git.config("feature.target", "master")

    git.checkout(branch)

@command
def status():
    '''show status of all features'''
    ''' Show all feature branches that might require work'''
    masterbranch =git.config("feature.target", "master")
    mastercommit = git.commitFor(masterbranch)

    results = dict()
    def add(b, msg):
        m = re.match("^(wip|ready)/(.*)", b)
	if m is None:
	   raise Exception("Can't find branch in '{}'".format(b))
        b = m.group(2)
        if b not in results:
            results[b] = []
        results[b].append(msg)

    cur = git.currentBranch()

    if re.match("^(wip|ready)/",cur) and git.hasChanges():
        add(cur, "uncommitted changes")

    unmerged = filter(lambda x: "ready/" in x, linesFrom("git branch --no-merged"))
    for b in unmerged:
        add(b, "not in current branch")

    branches = git.branches()

    wip = filter(lambda x: re.match("^wip/",x), branches)
    ready = filter(lambda x: re.match("^ready/",x), branches)

    branches = git.branches()
    for branch in wip:
        target = re.sub("^wip/", "ready/", branch)
        if target in branches:
            changes = git.changes(branch, target)
            if len(changes) > 0:
                add(branch, "{} change(s) in progress".format(len(changes)))
        else:
            changes=git.changes(branch, masterbranch)
            if len(changes) > 0:
                add(branch, "no ready branch. {} change(s) in progress".format(len(changes)))
            else:
                add(branch, "not started")

    for branch in ready:
        changes = git.changes(branch, masterbranch)
        if changes:
            add(branch, "{} change(s) ready to merge to {}".format(len(changes), masterbranch))
        else:
            add(branch, "ready changes integrated")


    for k in sorted(results):
        print "{}: {}".format(k, ", ".join(results[k]))
    
@command
def pending():
    ''' Show all feature branches that might require work'''
    masterbranch =git.config("feature.target", "master")
    mastercommit = git.commitFor(masterbranch)

    results = dict()
    def add(b, msg):
        m = re.match("^(wip|ready)/(.*)", b)
        b = m.group(2)
        if b not in results:
            results[b] = []
        results[b].append(msg)

    cur = git.currentBranch()

    if re.match("^(wip|ready)/",cur) and git.hasChanges():
        add(cur, "uncommitted changes")

    unmerged = filter(lambda x: "ready/" in x, linesFrom("git branch --no-merged"))
    for b in unmerged:
        add(b, "not in current branch")

    branches = git.branches()

    wip = filter(lambda x: re.match("^wip/",x), branches)
    ready = filter(lambda x: re.match("^ready/",x), branches)

    branches = git.branches()
    for branch in wip:
        target = re.sub("^wip/", "ready/", branch)
        if target in branches:
            changes = git.changes(branch, target)
            if len(changes) > 0:
                add(branch, "{} change(s) in progress".format(len(changes)))
        else:
            changes=git.changes(branch, masterbranch)
            if len(changes) > 0:
                add(branch, "no ready branch. {} change(s) in progress".format(len(changes)))

    for branch in ready:
        changes = git.changes(branch, masterbranch)
        if changes:
            add(branch, "{} change(s) ready to merge to {}".format(len(changes), masterbranch))


    for k in sorted(results):
        print "{}: {}".format(k, ", ".join(results[k]))
        
@command
def info():
    print "integration branch is {}".format(git.config("feature.target", "master"))
    print "publish ready features to {}".format(git.config("feature.origin", "origin"))
    print "push work in progress to {}".format(git.config("feature.fork", "mine"))

@command
def unmerged():
    ''' Show all feature branches that have not yet been merged to the current branch'''
    print "\n".join(filter(lambda x: "ready/" in x, cutlines(2, "git branch --no-merged")))

@command
def merged():
    ''' Show all feature branches that a READY and *have* been merged '''
    print "\n".join(filter(lambda x: "ready/" in x, cutlines(2, "git branch --merged")))

@command
def wip():
    '''show work in progress branches that have not yet been merged to ready'''
    branches = git.branches()
    for branch in filter(lambda x: "wip/" in x, git.branches()):
        target = re.sub("^wip/", "ready/", branch)
        if target in branches and git.hasChanges(branch, target):
            print branch


######################################################################
# and main...

def runcommand(args):
    ''' Run the UI command with appropriate arguments by introspection'''
    func = args.func
    info = inspect.getargspec(func)
    d = dict()
    for a in info.args:
        d[a]=args.__dict__[a]

    func(**d)

def main():
    parser = argparse.ArgumentParser(description="Implement git feature branches")

    subparser  = parser.add_subparsers()

    # Dynamically add arguments for commands
    for f in Commands:
        subp = subparser.add_parser(f.__name__, help=f.__doc__)
        subp.set_defaults(func=f)
        info = inspect.getargspec(f)

        count_positionals = len(info.args) - (len(info.defaults) if type(info.defaults) != type(None) else 0)

        positionals = info.args[0:count_positionals]
        optionals = info.args[count_positionals:]

#        print "{} positionals for {} from {} (defaults {}) are {}".format(count_positionals, f.__name__, info.args, info.defaults, positionals)

        for a in positionals:
            subp.add_argument(a)

        def addopt(name, default):
#            print "Adding argument {}={}".format(name, default)
            if type(default) == bool:
                subp.add_argument("--" + name, action='store_true', default=default)
            else:
                subp.add_argument("--" + name, default=default)

        # add the optonal arguments
        if info.defaults:
            map(addopt, optionals, info.defaults)

    args = parser.parse_args()

    runcommand(args)


if __name__ == "__main__":
    main()
